var documenterSearchIndex = {"docs":
[{"location":"generated/implicit/#implicit_schemes","page":"Implicit","title":"Implicit schemes","text":"","category":"section"},{"location":"generated/implicit/","page":"Implicit","title":"Implicit","text":"using NewtonKrylov\n\nusing NewtonKrylov","category":"page"},{"location":"generated/implicit/#Implicit-Euler","page":"Implicit","title":"Implicit Euler","text":"","category":"section"},{"location":"generated/implicit/","page":"Implicit","title":"Implicit","text":"function G_Euler!(res, uₙ, Δt, f!, du, u, p, t)\n    f!(du, u, p, t)\n\n    res .= uₙ .+ Δt .* du .- u\n    return nothing\nend","category":"page"},{"location":"generated/implicit/#Implicit-Midpoint","page":"Implicit","title":"Implicit Midpoint","text":"","category":"section"},{"location":"generated/implicit/","page":"Implicit","title":"Implicit","text":"function G_Midpoint!(res, uₙ, Δt, f!, du, u, p, t; α = 0.5)\n    # Use res for a temporary allocation (uₙ .+ u) ./ 2\n    uuₙ = res\n    uuₙ .= (α .* uₙ .+ (1 - α) .* u)\n    f!(du, uuₙ, p, t + α * Δt)\n\n    res .= uₙ .+ Δt .* du .- u\n    return nothing\nend","category":"page"},{"location":"generated/implicit/#Implicit-Trapezoid","page":"Implicit","title":"Implicit Trapezoid","text":"","category":"section"},{"location":"generated/implicit/","page":"Implicit","title":"Implicit","text":"function G_Trapezoid!(res, uₙ, Δt, f!, du, u, p, t)\n    # Use res as the temporary\n    duₙ = res\n    f!(duₙ, uₙ, p, t)\n    f!(du, u, p, t + Δt)\n\n    res .= uₙ .+ (Δt / 2) .* (duₙ .+ du) .- u\n    return nothing\nend","category":"page"},{"location":"generated/implicit/#Jacobian-of-various-G","page":"Implicit","title":"Jacobian of various G","text":"","category":"section"},{"location":"generated/implicit/","page":"Implicit","title":"Implicit","text":"function jacobian(G!, f!, uₙ, p, Δt, t)\n    u = copy(uₙ)\n    du = zero(uₙ)\n    res = zero(uₙ)\n\n    F!(res, u, (uₙ, Δt, du, p, t)) = G!(res, uₙ, Δt, f!, du, u, p, t)\n\n    J = NewtonKrylov.JacobianOperator(F!, res, u, (uₙ, Δt, du, p, t))\n    return collect(J)\nend","category":"page"},{"location":"generated/implicit/#Non-adaptive-time-stepping","page":"Implicit","title":"Non-adaptive time stepping","text":"","category":"section"},{"location":"generated/implicit/","page":"Implicit","title":"Implicit","text":"import Krylov\n\nfunction solve(\n        G!, f!, uₙ, p, Δt, ts; callback = _ -> nothing,\n        verbose = 0, Workspace = Krylov.GmresWorkspace, krylov_kwargs = (;)\n    )\n    u = copy(uₙ)\n    du = zero(uₙ)\n    res = zero(uₙ)\n    F!(res, u, (uₙ, Δt, du, p, t)) = G!(res, uₙ, Δt, f!, du, u, p, t)\n\n    for t in ts\n        if t == first(ts)\n            continue\n        end\n        _, stats = newton_krylov!(\n            F!, u, (uₙ, Δt, du, p, t), res;\n            verbose, Workspace, tol_abs = 6.0e-6, krylov_kwargs\n        )\n        if !stats.solved\n            @warn \"non linear solve failed marching on\" t stats\n        end\n        callback(u)\n        uₙ .= u\n    end\n    return uₙ\nend","category":"page"},{"location":"generated/implicit/","page":"Implicit","title":"Implicit","text":"","category":"page"},{"location":"generated/implicit/","page":"Implicit","title":"Implicit","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/simple/","page":"Simple","title":"Simple","text":"# Simple 2D example from (Kelley2003)[@cite]\n\nusing NewtonKrylov, LinearAlgebra\nusing CairoMakie\n\nfunction F!(res, x, _)\n    res[1] = x[1]^2 + x[2]^2 - 2\n    return res[2] = exp(x[1] - 1) + x[2]^2 - 2\nend\n\nfunction F(x, p)\n    res = similar(x)\n    F!(res, x, p)\n    return res\nend\n\n\nxs = LinRange(-3, 8, 1000)\nys = LinRange(-15, 10, 1000)\n\nlevels = [0.1, 0.25, 0.5:2:10..., 10.0:10:200..., 200:100:4000...]\n\nfig, ax = contour(xs, ys, (x, y) -> norm(F([x, y], nothing)); levels)\n\ntrace_1 = let x₀ = [2.0, 0.5]\n    xs = Vector{Tuple{Float64, Float64}}(undef, 0)\n    hist(x, res, n_res) = (push!(xs, (x[1], x[2])); nothing)\n    x, stats = newton_krylov!(F!, x₀, nothing, callback = hist)\n    xs\nend\nlines!(ax, trace_1)\n\ntrace_2 = let x₀ = [2.5, 3.0]\n    xs = Vector{Tuple{Float64, Float64}}(undef, 0)\n    hist(x, res, n_res) = (push!(xs, (x[1], x[2])); nothing)\n    x, stats = newton_krylov!(F!, x₀, nothing, callback = hist)\n    xs\nend\nlines!(ax, trace_2)\n\ntrace_3 = let x₀ = [3.0, 4.0]\n    xs = Vector{Tuple{Float64, Float64}}(undef, 0)\n    hist(x, res, n_res) = (push!(xs, (x[1], x[2])); nothing)\n    x, stats = newton_krylov!(F!, x₀, nothing, callback = hist, forcing = NewtonKrylov.EisenstatWalker(η_max = 0.68949), verbose = 1)\n    @show stats.solved\n    xs\nend\nlines!(ax, trace_3)\n\nfig","category":"page"},{"location":"generated/simple/","page":"Simple","title":"Simple","text":"","category":"page"},{"location":"generated/simple/","page":"Simple","title":"Simple","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/spring/#Implicit-time-integration-(Spring-example)","page":"Implicit – Spring","title":"Implicit time-integration (Spring example)","text":"","category":"section"},{"location":"generated/spring/#Necessary-packages","page":"Implicit – Spring","title":"Necessary packages","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"using NewtonKrylov\nusing CairoMakie","category":"page"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"Include the implicit time-steppers from Implicit schemes","category":"page"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"include(joinpath(dirname(pathof(NewtonKrylov)), \"..\", \"examples\", \"implicit.jl\"))","category":"page"},{"location":"generated/spring/#Spring-equations","page":"Implicit – Spring","title":"Spring equations","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"function f!(du, u, (γ,), t)\n    du[1] = u[2] # dx/dt = v\n    du[2] = -γ^2 * u[1] # dv/dt = -γ^2 * x\n    return nothing\nend","category":"page"},{"location":"generated/spring/#Problem-setup","page":"Implicit – Spring","title":"Problem setup","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"function implicit_spring(G! = G_Euler!, Δt = 0.01; verbose = 0)\n    k = 2.0    # spring constant\n    m = 1.0    # object's mass\n    x0 = 0.1 # initial position\n    v0 = 0.0   # initial velocity\n\n    t₀ = 0.0\n    tₛ = 40.0\n\n    ts = t₀:Δt:tₛ\n\n    uₙ = [x0, v0]\n\n    γ = sqrt(k / m)\n\n    hist = [copy(uₙ)]\n    callback = (u) -> push!(hist, copy(u))\n    solve(G!, f!, uₙ, (γ,), Δt, ts, ; callback, verbose)\n    return hist, ts[1:length(hist)]\nend","category":"page"},{"location":"generated/spring/#Plots","page":"Implicit – Spring","title":"Plots","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"function compare(Δt = 0.01)\n    hist_euler, ts_euler = implicit_spring(G_Euler!, Δt)\n    v_euler = map(y -> y[1], hist_euler)\n    x_euler = map(y -> y[2], hist_euler)\n\n    hist_midpoint, ts_midpoint = implicit_spring(G_Midpoint!, Δt)\n    v_midpoint = map(y -> y[1], hist_midpoint)\n    x_midpoint = map(y -> y[2], hist_midpoint)\n\n\n    hist_trapezoid, ts_trapezoid = implicit_spring(G_Trapezoid!, Δt)\n    v_trapezoid = map(y -> y[1], hist_trapezoid)\n    x_trapezoid = map(y -> y[2], hist_trapezoid)\n\n\n    fig = Figure()\n\n    lines(fig[1, 1], ts_euler, v_euler, label = \"Euler\")\n    lines(fig[1, 2], ts_euler, x_euler, label = \"Euler\")\n\n    lines(fig[2, 1], ts_midpoint, v_midpoint, label = \"Midpoint\")\n    lines(fig[2, 2], ts_midpoint, x_midpoint, label = \"Midpoint\")\n\n    lines(fig[3, 1], ts_trapezoid, v_trapezoid, label = \"Trapezoid\")\n    lines(fig[3, 2], ts_trapezoid, x_trapezoid, label = \"Trapezoid\")\n\n    return fig\nend","category":"page"},{"location":"generated/spring/#t-0.01","page":"Implicit – Spring","title":"t = 0.01","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"compare(0.01)","category":"page"},{"location":"generated/spring/#t-0.02","page":"Implicit – Spring","title":"t = 0.02","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"compare(0.02)","category":"page"},{"location":"generated/spring/#t-0.05","page":"Implicit – Spring","title":"t = 0.05","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"compare(0.05)","category":"page"},{"location":"generated/spring/#t-0.1","page":"Implicit – Spring","title":"t = 0.1","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"compare(0.1)","category":"page"},{"location":"generated/spring/#t-1.0","page":"Implicit – Spring","title":"t = 1.0","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"compare(1.0)","category":"page"},{"location":"generated/spring/#t-1.0-2","page":"Implicit – Spring","title":"t = 1.0","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"compare(10.0)","category":"page"},{"location":"generated/spring/#Jacobian-of-implicit-step","page":"Implicit – Spring","title":"Jacobian of implicit step","text":"","category":"section"},{"location":"generated/spring/#Implicit-Euler","page":"Implicit – Spring","title":"Implicit Euler","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"jacobian(G_Euler!, f!, [0.1, 0.0], (sqrt(2.0 / 1.0),), 0.01, 0.0)","category":"page"},{"location":"generated/spring/#Implicit-Midpoint","page":"Implicit – Spring","title":"Implicit Midpoint","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"jacobian(G_Midpoint!, f!, [0.1, 0.0], (sqrt(2.0 / 1.0),), 0.1, 0.0)","category":"page"},{"location":"generated/spring/#Implicit-Trapezoid","page":"Implicit – Spring","title":"Implicit Trapezoid","text":"","category":"section"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"jacobian(G_Trapezoid!, f!, [0.1, 0.0], (sqrt(2.0 / 1.0),), 0.1, 0.0)","category":"page"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"","category":"page"},{"location":"generated/spring/","page":"Implicit – Spring","title":"Implicit – Spring","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/heat_2D/#Implicit-time-integration","page":"Implicit – Heat 2D","title":"Implicit time-integration","text":"","category":"section"},{"location":"generated/heat_2D/#Necessary-packages","page":"Implicit – Heat 2D","title":"Necessary packages","text":"","category":"section"},{"location":"generated/heat_2D/","page":"Implicit – Heat 2D","title":"Implicit – Heat 2D","text":"using NewtonKrylov\nusing CairoMakie\nusing OffsetArrays\n\ninclude(joinpath(dirname(pathof(NewtonKrylov)), \"..\", \"examples\", \"implicit.jl\"))\ninclude(joinpath(dirname(pathof(NewtonKrylov)), \"..\", \"examples\", \"halovector.jl\"))","category":"page"},{"location":"generated/heat_2D/#Diffusion-2D","page":"Implicit – Heat 2D","title":"Diffusion 2D","text":"","category":"section"},{"location":"generated/heat_2D/#Boundary","page":"Implicit – Heat 2D","title":"Boundary","text":"","category":"section"},{"location":"generated/heat_2D/","page":"Implicit – Heat 2D","title":"Implicit – Heat 2D","text":"function bc_periodic!(u)\n    N, M = size(u)\n    N = N - 2\n    M = M - 2\n\n    # (wrap around)\n    u[0, :] .= u[N, :]\n    u[N + 1, :] .= u[1, :]\n    u[:, 0] .= u[:, N]\n    u[:, N + 1] .= u[:, 1]\n    return nothing\nend\n\nfunction bc_zero!(u)\n    N, M = size(u)\n    N = N - 2\n    M = M - 2\n\n    u[0, :] .= 0\n    u[N + 1, :] .= 0\n    u[:, 0] .= 0\n    u[:, N + 1] .= 0\n    return nothing\nend\n\n\nfunction diffusion!(du::HaloVector, u::HaloVector, p, t)\n    return diffusion!(du.data, u.data, p, t)\nend\n\nfunction diffusion!(du, u, (a, Δx, Δy, bc!), _)\n    N, M = size(u)\n    N = N - 2\n    M = M - 2\n\n    # Enforce boundary conditions\n    bc!(u)\n\n    for i in 1:N\n        for j in 1:M\n            du[i, j] = a * (\n                (u[i + 1, j] - 2 * u[i, j] + u[i - 1, j]) / Δx^2 +\n                    (u[i, j + 1] - 2 * u[i, j] + u[i, j - 1]) / Δy^2\n            )\n        end\n    end\n    return\nend\n\na = 0.01\n\nN = M = 40\n\nΔx = 1 / (N + 1)  # x-grid spacing\nΔy = 1 / (M + 1)  # y-grid spacing\n\n# TODO: This is a time-step from explicit\nΔt = Δx^2 * Δy^2 / (2.0 * a * (Δx^2 + Δy^2)) # Largest stable time step\n\nlet\n    N = M = 12\n    u₀ = HaloVector(OffsetArray(zeros(N + 2, M + 2), 0:(N + 1), 0:(M + 1)))\n    jacobian(G_Euler!, diffusion!, u₀, (a, Δx, Δy, bc_zero!), Δt, 0.0)\nend\n\nxs = 0.0:Δx:1.0\nys = 0.0:Δy:1.0\n\nfunction f(x, y)\n    return sin(π * x) .* sin(π * y)\nend\n\nu₀ = let\n    _u₀ = zeros(N + 2, M + 2)\n    _u₀ .= f.(xs, ys')\n    HaloVector(OffsetArray(_u₀, 0:(N + 1), 0:(M + 1)))\nend\n\nfunction plot_state(t, u, xs, ys)\n    data = @lift $u.data.parent\n\n    xs_line = @lift @view $data[:, M ÷ 2]\n    ys_line = @lift @view $data[N ÷ 2, :]\n\n    fig = Figure()\n\n    ax = Axis(fig[1, 1])\n    heatmap!(ax, xs, ys, data)\n\n    ax1 = Axis(fig[2, 1])\n    lines!(ax1, xs, xs_line)\n\n    ax2 = Axis(fig[2, 2])\n    lines!(ax2, ys, ys_line)\n\n    fig[0, :] = Label(fig, @lift(\"t = $($t)\"))\n\n    return fig\nend\n\nfig = plot_state(Observable(0.0), Observable(u₀), xs, ys)\n\nfunction create_video_implicit(filename, G!, f!, xs, ys, u, p, Δt, t_stop, frame_kwargs)\n    ts = 0.0:Δt:t_stop\n    _u = Observable(u)\n    _t = Observable(first(ts))\n\n    fig = plot_state(_t, _u, xs, ys)\n    return record(fig, filename; frame_kwargs...) do io\n        function callback(__u)\n            _u[] = u\n            _t[] += Δt\n            # autolimits!(ax) # update limits\n            recordframe!(io)\n            return yield()\n        end\n        solve(G!, f!, u, p, Δt, ts; callback, verbose = 1, krylov_kwargs = (; verbose = 1, reorthogonalization = true))\n    end\nend\n\ncreate_video_implicit(\n    joinpath(@__DIR__, \"implicit_euler.mp4\"),\n    G_Euler!, diffusion!, xs, ys, copy(u₀), (a, Δx, Δy, bc_zero!), Δt, 10.0, (; framerate = 30)\n)\n\ncreate_video_implicit(\n    joinpath(@__DIR__, \"implicit_midpoint.mp4\"),\n    G_Midpoint!, diffusion!, xs, ys, copy(u₀), (a, Δx, Δy, bc_zero!), Δt, 10.0, (; framerate = 30)\n)\n\ncreate_video_implicit(\n    joinpath(@__DIR__, \"implicit_trapezoid.mp4\"),\n    G_Trapezoid!, diffusion!, xs, ys, copy(u₀), (a, Δx, Δy, bc_zero!), Δt, 10.0, (; framerate = 30)\n)\n\n# TODO:\ncreate_video_implicit(\n    joinpath(@__DIR__, \"implicit_euler_periodic.mp4\"),\n    G_Trapezoid!, diffusion!, xs, ys, copy(u₀), (a, Δx, Δy, bc_periodic!), Δt, 2 * Δt, (; framerate = 30)\n)","category":"page"},{"location":"generated/heat_2D/","page":"Implicit – Heat 2D","title":"Implicit – Heat 2D","text":"","category":"page"},{"location":"generated/heat_2D/","page":"Implicit – Heat 2D","title":"Implicit – Heat 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/bratu/#1D-bratu-equation-from-(Kan2022-ko)[@cite]","page":"Bratu – 1D","title":"1D bratu equation from (Kan2022-ko)[@cite]","text":"","category":"section"},{"location":"generated/bratu/#Necessary-packages","page":"Bratu – 1D","title":"Necessary packages","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"using NewtonKrylov, Krylov\nusing KrylovPreconditioners\nusing SparseArrays, LinearAlgebra\nusing CairoMakie","category":"page"},{"location":"generated/bratu/#1D-Bratu-equations","page":"Bratu – 1D","title":"1D Bratu equations","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"y + λ * exp(y) = 0","category":"page"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"F(u) = 0","category":"page"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"function bratu!(res, y, (Δx, λ))\n    N = length(y)\n    for i in 1:N\n        y_l = i == 1 ? zero(eltype(y)) : y[i - 1]\n        y_r = i == N ? zero(eltype(y)) : y[i + 1]\n        y′′ = (y_r - 2y[i] + y_l) / Δx^2\n\n        res[i] = y′′ + λ * exp(y[i]) # = 0\n    end\n    return nothing\nend\n\nfunction bratu(y, p)\n    res = similar(y)\n    bratu!(res, y, p)\n    return res\nend","category":"page"},{"location":"generated/bratu/#Reference-solution","page":"Bratu – 1D","title":"Reference solution","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"function true_sol_bratu(x)\n    # for λ = 3.51382, 2nd sol θ = 4.8057\n    θ = 4.79173\n    return -2 * log(cosh(θ * (x - 0.5) / 2) / (cosh(θ / 4)))\nend","category":"page"},{"location":"generated/bratu/#Choice-of-parameters","page":"Bratu – 1D","title":"Choice of parameters","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"const N = 10_000\nconst λ = 3.51382\nconst dx = 1 / (N + 1) # Grid-spacing","category":"page"},{"location":"generated/bratu/#Domain-and-Inital-condition","page":"Bratu – 1D","title":"Domain and Inital condition","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"x = LinRange(0.0 + dx, 1.0 - dx, N)\nu₀ = sin.(x .* π)\n\nlines(x, u₀, label = \"Inital guess\")","category":"page"},{"location":"generated/bratu/#Reference-solution-evaluated-over-domain","page":"Bratu – 1D","title":"Reference solution evaluated over domain","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"reference = true_sol_bratu.(x)\n\nfig, ax = lines(x, u₀, label = \"Inital guess\")\nlines!(ax, x, reference, label = \"Reference solution\")\naxislegend(ax, position = :cb)\nfig","category":"page"},{"location":"generated/bratu/#Solving-using-inplace-variant-and-CG","page":"Bratu – 1D","title":"Solving using inplace variant and CG","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"uₖ, _ = newton_krylov!(\n    bratu!,\n    copy(u₀), (dx, λ), similar(u₀);\n    Workspace = CgWorkspace,\n)\n\nϵ = abs2.(uₖ .- reference)\n\nlet\n    fig = Figure(size = (800, 800))\n    ax = Axis(fig[1, 1], title = \"\", ylabel = \"\", xlabel = \"\")\n\n    lines!(ax, x, reference, label = \"True solution\")\n    lines!(ax, x, u₀, label = \"Initial guess\")\n    lines!(ax, x, uₖ, label = \"Newton-Krylov solution\")\n\n    axislegend(ax, position = :cb)\n\n    ax = Axis(fig[1, 2], title = \"Error\", ylabel = \"abs2 err\", xlabel = \"\")\n    lines!(ax, abs2.(uₖ .- reference))\n\n    fig\nend","category":"page"},{"location":"generated/bratu/#Solving-using-the-out-of-place-variant","page":"Bratu – 1D","title":"Solving using the out of place variant","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"_, stats = newton_krylov(\n    bratu,\n    copy(u₀), (dx, λ);\n    Workspace = CgWorkspace\n)\nstats","category":"page"},{"location":"generated/bratu/#Solving-with-a-fixed-forcing","page":"Bratu – 1D","title":"Solving with a fixed forcing","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"_, stats = newton_krylov!(\n    bratu!,\n    copy(u₀), (dx, λ), similar(u₀);\n    Workspace = CgWorkspace,\n    forcing = NewtonKrylov.Fixed(0.1)\n)\nstats","category":"page"},{"location":"generated/bratu/#Solving-with-no-forcing","page":"Bratu – 1D","title":"Solving with no forcing","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"_, stats = newton_krylov!(\n    bratu!,\n    copy(u₀), (dx, λ), similar(u₀);\n    Workspace = CgWorkspace,\n    forcing = nothing\n)\nstats","category":"page"},{"location":"generated/bratu/#Solve-using-GMRES-–-doesn't-converge","page":"Bratu – 1D","title":"Solve using GMRES – doesn't converge","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"_, stats = newton_krylov!(\n    bratu!,\n    copy(u₀), (dx, λ), similar(u₀);\n    Workspace = GmresWorkspace,\n)\nstats","category":"page"},{"location":"generated/bratu/#Solve-using-GMRES-ILU-Preconditoner","page":"Bratu – 1D","title":"Solve using GMRES + ILU Preconditoner","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"_, stats = newton_krylov!(\n    bratu!,\n    copy(u₀), (dx, λ), similar(u₀);\n    Workspace = GmresWorkspace,\n    N = (J) -> ilu(collect(J)), # Assembles the full Jacobian\n    krylov_kwargs = (; ldiv = true)\n)\nstats","category":"page"},{"location":"generated/bratu/#Solve-using-FGMRES-ILU-Preconditoner","page":"Bratu – 1D","title":"Solve using FGMRES + ILU Preconditoner","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"_, stats = newton_krylov!(\n    bratu!,\n    copy(u₀), (dx, λ), similar(u₀);\n    Workspace = FgmresWorkspace,\n    N = (J) -> ilu(collect(J)), # Assembles the full Jacobian\n    krylov_kwargs = (; ldiv = true)\n)\nstats","category":"page"},{"location":"generated/bratu/#Solve-using-FGMRES-GMRES-Preconditoner","page":"Bratu – 1D","title":"Solve using FGMRES + GMRES Preconditoner","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"struct GmresPreconditioner{JOp}\n    J::JOp\n    itmax::Int\nend\n\nfunction LinearAlgebra.mul!(y, P::GmresPreconditioner, x)\n    sol, _ = gmres(P.J, x; P.itmax)\n    return copyto!(y, sol)\nend\n\n_, stats = newton_krylov!(\n    bratu!,\n    copy(u₀), (dx, λ), similar(u₀);\n    Workspace = FgmresWorkspace,\n    N = (J) -> GmresPreconditioner(J, 5),\n)\nstats","category":"page"},{"location":"generated/bratu/#Explodes..","page":"Bratu – 1D","title":"Explodes..","text":"","category":"section"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"newton_krylov!(\n\tbratu!,\n\tcopy(u₀), (dx, λ), similar(u₀);\n\tWorkspace = CglsWorkspace, # CgneWorkspace\n  krylov_kwargs = (; verbose=1)\n)","category":"page"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"newton_krylov!(\n\tbratu!,\n\tcopy(u₀), (dx, λ), similar(u₀);\n\tverbose = 1,\n\tWorkspace = BicgstabWorkspace, # L=2\n\tη_max = nothing\n)","category":"page"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"","category":"page"},{"location":"generated/bratu/","page":"Bratu – 1D","title":"Bratu – 1D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/heat_1D_DG/#Implicit-time-integration-(With-DG)","page":"Implicit – Heat 1D DG","title":"Implicit time-integration (With DG)","text":"","category":"section"},{"location":"generated/heat_1D_DG/#Necessary-packages","page":"Implicit – Heat 1D DG","title":"Necessary packages","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"using NewtonKrylov\nusing CairoMakie\nusing LinearAlgebra\nusing SummationByPartsOperators","category":"page"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"Include the implicit time-steppers from Implicit schemes","category":"page"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"include(joinpath(dirname(pathof(NewtonKrylov)), \"..\", \"examples\", \"implicit.jl\"));\nnothing #hide","category":"page"},{"location":"generated/heat_1D_DG/#Setting-up-the-space-discretization","page":"Implicit – Heat 1D DG","title":"Setting up the space discretization","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"xmin = 0.0\nxmax = 1.0\n\npolydeg = 3\nelements = 40\n\nD_local = legendre_derivative_operator(xmin = -1.0, xmax = 1.0, N = polydeg + 1)\nmesh = UniformPeriodicMesh1D(; xmin, xmax, Nx = elements)\n\n# D1m = D1p = couple_discontinuously(D_local, mesh, Val(:central))\nD1m = couple_discontinuously(D_local, mesh, Val(:minus))\nD1p = couple_discontinuously(D_local, mesh, Val(:plus))\n\nx = grid(D1m)","category":"page"},{"location":"generated/heat_1D_DG/#Heat-1D","page":"Implicit – Heat 1D DG","title":"Heat 1D","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"$ \\frac{\\partial u(x, t)}{\\partial t} = \\frac{\\partial^2 u(x, t)}{\\partial x^2} $","category":"page"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"function heat_1D!(du, u, (D1m, D1p), t)\n    du1 = D1p * u\n    mul!(du, D1m, du1)\n    return\nend","category":"page"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"Inital condition:","category":"page"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"f(x) = sin(π * x)","category":"page"},{"location":"generated/heat_1D_DG/#Investigate-the-Jacobian's","page":"Implicit – Heat 1D DG","title":"Investigate the Jacobian's","text":"","category":"section"},{"location":"generated/heat_1D_DG/#Euler","page":"Implicit – Heat 1D DG","title":"Euler","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"J = jacobian(G_Euler!, heat_1D!, zero(x), (D1m, D1p), 0.1, 0.0)","category":"page"},{"location":"generated/heat_1D_DG/#Midpoint","page":"Implicit – Heat 1D DG","title":"Midpoint","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"J = jacobian(G_Midpoint!, heat_1D!, zero(x), (D1m, D1p), 0.1, 0.0)","category":"page"},{"location":"generated/heat_1D_DG/#Trapezoid","page":"Implicit – Heat 1D DG","title":"Trapezoid","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"J = jacobian(G_Trapezoid!, heat_1D!, zero(x), (D1m, D1p), 0.1, 0.0)","category":"page"},{"location":"generated/heat_1D_DG/#Problem-setup","page":"Implicit – Heat 1D DG","title":"Problem setup","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"function solve_heat_1D(G!, x, Δt, t_final, initial_condition, p)\n    ts = 0.0:Δt:t_final\n\n    u₀ = initial_condition.(x)\n\n    hist = [copy(u₀)]\n    callback = (u) -> push!(hist, copy(u))\n    solve(G!, heat_1D!, u₀, p, Δt, ts; callback)\n\n    return x, ts[1:length(hist)], hist\nend","category":"page"},{"location":"generated/heat_1D_DG/#Problem-plotting","page":"Implicit – Heat 1D DG","title":"Problem plotting","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"function plot_1D(xs, ts, hist)\n    fig, ax = lines(xs, hist[1])\n    for i in 2:length(hist)\n        lines!(ax, xs, hist[i])\n    end\n    return fig\nend","category":"page"},{"location":"generated/heat_1D_DG/#Choose-time-parameters","page":"Implicit – Heat 1D DG","title":"Choose time-parameters","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"Δt = 0.01\nt_final = 50.0","category":"page"},{"location":"generated/heat_1D_DG/#Solving-the-problem-with-Implicit-Euler","page":"Implicit – Heat 1D DG","title":"Solving the problem with Implicit Euler","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"xs, ts, hist = solve_heat_1D(G_Euler!, x, Δt, t_final, f, (D1m, D1p));\nnothing #hide","category":"page"},{"location":"generated/heat_1D_DG/#Initial-and-final","page":"Implicit – Heat 1D DG","title":"Initial and final","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"let\n    fig, ax = lines(x, hist[1])\n    lines!(ax, x, hist[end])\n    fig\nend","category":"page"},{"location":"generated/heat_1D_DG/#Contour","page":"Implicit – Heat 1D DG","title":"Contour","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"contour(xs, ts, stack(hist))","category":"page"},{"location":"generated/heat_1D_DG/#Time-shift","page":"Implicit – Heat 1D DG","title":"Time-shift","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"plot_1D(xs, ts, hist)","category":"page"},{"location":"generated/heat_1D_DG/#Solving-the-problem-with-Implicit-Midpoint","page":"Implicit – Heat 1D DG","title":"Solving the problem with Implicit Midpoint","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"xs, ts, hist = solve_heat_1D(G_Midpoint!, x, Δt, t_final, f, (D1m, D1p));\nnothing #hide","category":"page"},{"location":"generated/heat_1D_DG/#Initial-and-final-2","page":"Implicit – Heat 1D DG","title":"Initial and final","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"let\n    fig, ax = lines(x, hist[1])\n    lines!(ax, x, hist[end])\n    fig\nend","category":"page"},{"location":"generated/heat_1D_DG/#Contour-2","page":"Implicit – Heat 1D DG","title":"Contour","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"contour(xs, ts, stack(hist))","category":"page"},{"location":"generated/heat_1D_DG/#Time-shift-2","page":"Implicit – Heat 1D DG","title":"Time-shift","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"plot_1D(xs, ts, hist)","category":"page"},{"location":"generated/heat_1D_DG/#Solving-the-problem-with-Implicit-Trapezoid","page":"Implicit – Heat 1D DG","title":"Solving the problem with Implicit Trapezoid","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"xs, ts, hist = solve_heat_1D(G_Trapezoid!, x, Δt, t_final, f, (D1m, D1p));\nnothing #hide","category":"page"},{"location":"generated/heat_1D_DG/#Initial-and-final-3","page":"Implicit – Heat 1D DG","title":"Initial and final","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"let\n    fig, ax = lines(x, hist[1])\n    lines!(ax, x, hist[end])\n    fig\nend","category":"page"},{"location":"generated/heat_1D_DG/#Contour-3","page":"Implicit – Heat 1D DG","title":"Contour","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"contour(xs, ts, stack(hist))","category":"page"},{"location":"generated/heat_1D_DG/#Time-shift-3","page":"Implicit – Heat 1D DG","title":"Time-shift","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"plot_1D(xs, ts, hist)","category":"page"},{"location":"generated/heat_1D_DG/#Upwind-operator","page":"Implicit – Heat 1D DG","title":"Upwind operator","text":"","category":"section"},{"location":"generated/heat_1D_DG/#Set-up-the-space-discretization","page":"Implicit – Heat 1D DG","title":"Set up the space discretization","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"nnodes = 120\naccuracy_order = 3\nD = upwind_operators(\n    periodic_derivative_operator;\n    accuracy_order, xmin, xmax, N = nnodes\n)\nD1m = D.minus\nD1p = D.plus\n\nx = grid(D1m)","category":"page"},{"location":"generated/heat_1D_DG/#Solve-with-Implicit-Euler","page":"Implicit – Heat 1D DG","title":"Solve with Implicit Euler","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"xs, ts, hist = solve_heat_1D(G_Euler!, x, Δt, t_final, f, (D1m, D1p));\nnothing #hide","category":"page"},{"location":"generated/heat_1D_DG/#Initial-and-final-4","page":"Implicit – Heat 1D DG","title":"Initial and final","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"let\n    fig, ax = lines(x, hist[1])\n    lines!(ax, x, hist[end])\n    fig\nend","category":"page"},{"location":"generated/heat_1D_DG/#Contour-4","page":"Implicit – Heat 1D DG","title":"Contour","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"contour(xs, ts, stack(hist))","category":"page"},{"location":"generated/heat_1D_DG/#Time-shift-4","page":"Implicit – Heat 1D DG","title":"Time-shift","text":"","category":"section"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"plot_1D(xs, ts, hist)","category":"page"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"","category":"page"},{"location":"generated/heat_1D_DG/","page":"Implicit – Heat 1D DG","title":"Implicit – Heat 1D DG","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/heat_1D/#Implicit-time-integration","page":"Implicit – Heat 1D","title":"Implicit time-integration","text":"","category":"section"},{"location":"generated/heat_1D/#Necessary-packages","page":"Implicit – Heat 1D","title":"Necessary packages","text":"","category":"section"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"using NewtonKrylov\nusing CairoMakie\n\ninclude(joinpath(dirname(pathof(NewtonKrylov)), \"..\", \"examples\", \"implicit.jl\"))","category":"page"},{"location":"generated/heat_1D/#Heat-1D","page":"Implicit – Heat 1D","title":"Heat 1D","text":"","category":"section"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"$ \\frac{\\partial u(x, t)}{\\partial t} = a * \\frac{\\partial^2 u(x, t)}{\\partial x^2 $","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"function heat_1D!(du, u, (a, Δx, bc!), t)\n    N = length(u)\n\n    # Enforce the boundary condition\n    bc!(u)\n    du[1] = 0\n    du[end] = 0\n\n    # Only compute within\n    for i in 2:(N - 1)\n        du[i] = a * (u[i + 1] - 2u[i] + u[i - 1]) / Δx^2\n    end\n    return\nend","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"Dirchlet boundary condition f(0) = 0 f(L) = 0 L = 1 x ∈ (0,L)","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"function bc!(u)\n    u[1] = 0\n    return u[end] = 0\nend\n\nfunction periodic_bc!(u)\n    u[1] = u[end - 1]\n    return u[end] = u[2]\nend","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"inital condition","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"f(x) = 4x * (1 - x)\n\na = 0.5\n\nN = 10\n\nusing LinearAlgebra","category":"page"},{"location":"generated/heat_1D/#Investigate-the-Jacobian's","page":"Implicit – Heat 1D","title":"Investigate the Jacobian's","text":"","category":"section"},{"location":"generated/heat_1D/#Euler","page":"Implicit – Heat 1D","title":"Euler","text":"","category":"section"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"J = jacobian(G_Euler!, heat_1D!, zeros(N), (a, 1 / (N + 1), bc!), 0.1, 0.0)","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"Rank:","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"rank(J)","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"Condition number","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"cond(Array(J))","category":"page"},{"location":"generated/heat_1D/#Midpoint","page":"Implicit – Heat 1D","title":"Midpoint","text":"","category":"section"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"J = jacobian(G_Midpoint!, heat_1D!, zeros(N), (a, 1 / (N + 1), bc!), 0.1, 0.0)","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"Rank:","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"rank(J)","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"Condition number","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"cond(Array(J))","category":"page"},{"location":"generated/heat_1D/#Trapezoid","page":"Implicit – Heat 1D","title":"Trapezoid","text":"","category":"section"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"J = jacobian(G_Trapezoid!, heat_1D!, zeros(N), (a, 1 / (N + 1), bc!), 0.1, 0.0)","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"Rank:","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"rank(J)","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"Condition number","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"cond(Array(J))","category":"page"},{"location":"generated/heat_1D/#Euler-(Periodic-boundary-condition)","page":"Implicit – Heat 1D","title":"Euler (Periodic boundary condition)","text":"","category":"section"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"J = jacobian(G_Euler!, heat_1D!, zeros(N), (a, 1 / (N + 1), periodic_bc!), 0.1, 0.0)\n\n\nfunction solve_heat_1D(G!, L, M, a, Δt, t_final, initial_condition, bc!)\n    Δx = 1 / (M + 1)\n    xs = 0.0:Δx:L\n    ts = 0.0:Δt:t_final\n\n    u₀ = initial_condition.(xs)\n\n    hist = [copy(u₀)]\n    callback = (u) -> push!(hist, copy(u))\n    solve(G!, heat_1D!, u₀, (a, Δx, bc!), Δt, ts; callback)\n\n    return xs, ts[1:length(hist)], hist\nend\n\n\nL = 1.0\nM = 100\na = 0.2\nΔt = 0.1\nt_final = 3.0\n\n\nfunction plot_1D(xs, ts, hist)\n    fig, ax = lines(xs, hist[1])\n    for i in 2:length(hist)\n        lines!(ax, xs, hist[i])\n    end\n    return fig\nend\n\nxs, ts, hist = solve_heat_1D(G_Euler!, L, M, a, Δt, t_final, f, bc!);\n\ncontour(xs, ts, stack(hist))\nplot_1D(xs, ts, hist)\n\nxs, ts, hist = solve_heat_1D(G_Midpoint!, L, M, a, Δt, t_final, f, bc!);\n\ncontour(xs, ts, stack(hist))\nplot_1D(xs, ts, hist)\n\nxs, ts, hist = solve_heat_1D(G_Trapezoid!, L, M, a, Δt, t_final, f, bc!);\n\ncontour(xs, ts, stack(hist))\nplot_1D(xs, ts, hist)","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"","category":"page"},{"location":"generated/heat_1D/","page":"Implicit – Heat 1D","title":"Implicit – Heat 1D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#NewtonKrylov.jl","page":"Home","title":"NewtonKrylov.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Newton Method using Krylov.jl (montoison-orban-2023)[@cite]","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"#NewtonKrylov.newton_krylov!","page":"Home","title":"NewtonKrylov.newton_krylov!","text":"Arguments\n\nF!: F!(res, u, p) solves res = F(u) = 0\nu₀: Initial guess\np: Parameters\nM: Length of  the output of F!. Defaults to length(u₀)\n\nKeyword Arguments\n\ntol_rel: Relative tolerance\ntol_abs: Absolute tolerance\nmax_niter: Maximum number of iterations\nforcing: Maximum forcing term for inexact Newton.          If nothing an exact Newton method is used.  \nverbose:\nWorkspace:\nM:\nN:\nkrylov_kwarg\ncallback:\n\n\n\n\n\nArguments\n\nF!: F!(res, u, p) solves res = F(u) = 0\nu: Initial guess\np: \nres: Temporary for residual\n\nKeyword Arguments\n\ntol_rel: Relative tolerance\ntol_abs: Absolute tolerance\nmax_niter: Maximum number of iterations\nforcing: Maximum forcing term for inexact Newton.          If nothing an exact Newton method is used.  \nverbose:\nWorkspace:\nM:\nN:\nkrylov_kwarg\ncallback:\n\n\n\n\n\n","category":"function"},{"location":"#NewtonKrylov.newton_krylov","page":"Home","title":"NewtonKrylov.newton_krylov","text":"newton_krylov(F, u₀::AbstractArray, M::Int = length(u₀); kwargs...)\n\nArguments\n\nF: res = F(u₀, p) solves res = F(u₀) = 0\nu₀: Initial guess\np: Parameters\nM: Length of the output of F. Defaults to length(u₀).\n\nKeyword Arguments\n\ntol_rel: Relative tolerance\ntol_abs: Absolute tolerance\nmax_niter: Maximum number of iterations\nforcing: Maximum forcing term for inexact Newton.          If nothing an exact Newton method is used.  \nverbose:\nWorkspace:\nM:\nN:\nkrylov_kwarg\ncallback:\n\n\n\n\n\n","category":"function"},{"location":"#Parameters","page":"Home","title":"Parameters","text":"","category":"section"},{"location":"#NewtonKrylov.Forcing","page":"Home","title":"NewtonKrylov.Forcing","text":"Forcing\n\nImplements forcing for inexact Newton-Krylov. The equation F(u)d + F(u) = η * F(u) gives the inexact Newton termination criterion.\n\nImplemented variants\n\nFixed\nEisenstatWalker\n\n\n\n\n\n","category":"type"},{"location":"#NewtonKrylov.Fixed","page":"Home","title":"NewtonKrylov.Fixed","text":"Fixed(η = 0.1)\n\n\n\n\n\n","category":"type"},{"location":"#NewtonKrylov.EisenstatWalker","page":"Home","title":"NewtonKrylov.EisenstatWalker","text":"EisenstatWalker(η_max = 0.999, γ = 0.9)\n\n\n\n\n\n","category":"type"},{"location":"#Internal","page":"Home","title":"Internal","text":"","category":"section"},{"location":"#NewtonKrylov.JacobianOperator","page":"Home","title":"NewtonKrylov.JacobianOperator","text":"JacobianOperator\n\nEfficient implementation of J(f,x,p) * v and v * J(f, x,p)'\n\n\n\n\n\n","category":"type"},{"location":"#Bibliography","page":"Home","title":"Bibliography","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"generated/bratu_ka/#1D-bratu-equation-from-(Kan2022-ko)[@cite]","page":"Bratu – KernelAbstractions","title":"1D bratu equation from (Kan2022-ko)[@cite]","text":"","category":"section"},{"location":"generated/bratu_ka/#Necessary-packages","page":"Bratu – KernelAbstractions","title":"Necessary packages","text":"","category":"section"},{"location":"generated/bratu_ka/","page":"Bratu – KernelAbstractions","title":"Bratu – KernelAbstractions","text":"using NewtonKrylov, Krylov\nusing KrylovPreconditioners\nusing SparseArrays, LinearAlgebra\nusing CairoMakie\nusing KernelAbstractions","category":"page"},{"location":"generated/bratu_ka/#1D-Bratu-equations","page":"Bratu – KernelAbstractions","title":"1D Bratu equations","text":"","category":"section"},{"location":"generated/bratu_ka/","page":"Bratu – KernelAbstractions","title":"Bratu – KernelAbstractions","text":"y + λ * exp(y) = 0","category":"page"},{"location":"generated/bratu_ka/","page":"Bratu – KernelAbstractions","title":"Bratu – KernelAbstractions","text":"@kernel function bratu_kernel!(res, y, (Δx, λ))\n    i = @index(Global, Linear)\n    N = length(res)\n    y_l = i == 1 ? zero(eltype(y)) : y[i - 1]\n    y_r = i == N ? zero(eltype(y)) : y[i + 1]\n    y′′ = (y_r - 2y[i] + y_l) / Δx^2\n\n    res[i] = y′′ + λ * exp(y[i]) # = 0\nend\n\nfunction bratu!(res, y, p)\n    device = KernelAbstractions.get_backend(res)\n    kernel = bratu_kernel!(device)\n    kernel(res, y, p, ndrange = length(res))\n    return nothing\nend\n\nfunction bratu(y, p)\n    res = similar(y)\n    bratu!(res, y, p)\n    return res\nend","category":"page"},{"location":"generated/bratu_ka/#Reference-solution","page":"Bratu – KernelAbstractions","title":"Reference solution","text":"","category":"section"},{"location":"generated/bratu_ka/","page":"Bratu – KernelAbstractions","title":"Bratu – KernelAbstractions","text":"function true_sol_bratu(x)\n    # for λ = 3.51382, 2nd sol θ = 4.8057\n    θ = 4.79173\n    return -2 * log(cosh(θ * (x - 0.5) / 2) / (cosh(θ / 4)))\nend","category":"page"},{"location":"generated/bratu_ka/#Choice-of-parameters","page":"Bratu – KernelAbstractions","title":"Choice of parameters","text":"","category":"section"},{"location":"generated/bratu_ka/","page":"Bratu – KernelAbstractions","title":"Bratu – KernelAbstractions","text":"const N = 10_000\nconst λ = 3.51382\nconst dx = 1 / (N + 1) # Grid-spacing","category":"page"},{"location":"generated/bratu_ka/#Domain-and-Inital-condition","page":"Bratu – KernelAbstractions","title":"Domain and Inital condition","text":"","category":"section"},{"location":"generated/bratu_ka/","page":"Bratu – KernelAbstractions","title":"Bratu – KernelAbstractions","text":"x = LinRange(0.0 + dx, 1.0 - dx, N)\nu₀ = sin.(x .* π)\n\nlines(x, u₀, label = \"Inital guess\")","category":"page"},{"location":"generated/bratu_ka/#Reference-solution-evaluated-over-domain","page":"Bratu – KernelAbstractions","title":"Reference solution evaluated over domain","text":"","category":"section"},{"location":"generated/bratu_ka/","page":"Bratu – KernelAbstractions","title":"Bratu – KernelAbstractions","text":"reference = true_sol_bratu.(x)\n\nfig, ax = lines(x, u₀, label = \"Inital guess\")\nlines!(ax, x, reference, label = \"Reference solution\")\naxislegend(ax, position = :cb)\nfig","category":"page"},{"location":"generated/bratu_ka/#Solving-using-inplace-variant-and-CG","page":"Bratu – KernelAbstractions","title":"Solving using inplace variant and CG","text":"","category":"section"},{"location":"generated/bratu_ka/","page":"Bratu – KernelAbstractions","title":"Bratu – KernelAbstractions","text":"uₖ, _ = newton_krylov!(\n    bratu!,\n    copy(u₀), (dx, λ), similar(u₀);\n    Workspace = CgWorkspace,\n)\n\nϵ = abs2.(uₖ .- reference)\n\nlet\n    fig = Figure(size = (800, 800))\n    ax = Axis(fig[1, 1], title = \"\", ylabel = \"\", xlabel = \"\")\n\n    lines!(ax, x, reference, label = \"True solution\")\n    lines!(ax, x, u₀, label = \"Initial guess\")\n    lines!(ax, x, uₖ, label = \"Newton-Krylov solution\")\n\n    axislegend(ax, position = :cb)\n\n    ax = Axis(fig[1, 2], title = \"Error\", ylabel = \"abs2 err\", xlabel = \"\")\n    lines!(ax, abs2.(uₖ .- reference))\n\n    fig\nend","category":"page"},{"location":"generated/bratu_ka/","page":"Bratu – KernelAbstractions","title":"Bratu – KernelAbstractions","text":"","category":"page"},{"location":"generated/bratu_ka/","page":"Bratu – KernelAbstractions","title":"Bratu – KernelAbstractions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/bvp/","page":"BVP","title":"BVP","text":"BVP from (Kelley2022)[@cite]","category":"page"},{"location":"generated/bvp/","page":"BVP","title":"BVP","text":"using NewtonKrylov, Krylov, LinearAlgebra\n\nfunction Phi(t, tdag, vp, v)\n    phi = 4.0 * tdag * vp + (t * v - 1.0) * v\n    return phi\nend\n\nfunction Fbvp!(res, U, (force, tv, tvdag, h, n))\n    @assert 2n == length(U)\n    res[1] = U[2]\n    res[2n] = U[2n - 1]\n    v = view(U, 1:2:(2n - 1))\n    vp = view(U, 2:2:2n)\n    force .= Phi.(tv, tvdag, vp, v)\n    h2 = 0.5 * h\n    @inbounds @simd for ip in 1:(n - 1)\n        res[2 * ip + 1] = v[ip + 1] - v[ip] - h2 * (vp[ip] + vp[ip + 1])\n        res[2 * ip] = vp[ip + 1] - vp[ip] + h2 * (force[ip] + force[ip + 1])\n    end\n    return nothing\nend\n\nfunction BVP_U0!(U0, n, tv)\n    view(U0, 1:2:(2n - 1)) .= exp.(-0.1 .* tv .* tv)\n    return view(U0, 2:2:2n) .= -0.2 .* view(U0, 1:2:(2n - 1)) .* tv\nend\n\nstruct GmresPreconditioner{JOp}\n    J::JOp\n    itmax::Int\nend\n\nfunction LinearAlgebra.mul!(y, P::GmresPreconditioner, x)\n    sol, _ = gmres(P.J, x; P.itmax)\n    return copyto!(y, sol)\nend\n\nfunction BVP_solve(n = 801, T = Float64)\n    U0 = zeros(T, 2n)\n    res = zeros(T, 2n)\n\n    h = 20.0 / (n - 1)\n    tv = collect(0:h:20.0)\n\n    tvdag = collect(0:h:20.0)\n    @views tvdag[2:n] .= (1.0 ./ tv[2:n])\n\n    force = zeros(n)\n\n    BVP_U0!(U0, n, tv)\n\n    bvpout, stats = newton_krylov!(\n        Fbvp!, U0, (force, tv, tvdag, h, n), res,\n        Workspace = FgmresWorkspace,\n        N = (J) -> GmresPreconditioner(J, 30),\n    )\n    return (; bvpout, tv, stats)\nend\n\nBVP_solve()","category":"page"},{"location":"generated/bvp/","page":"BVP","title":"BVP","text":"","category":"page"},{"location":"generated/bvp/","page":"BVP","title":"BVP","text":"This page was generated using Literate.jl.","category":"page"}]
}
